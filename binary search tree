// Online C++ compiler to run C++ program online
#include <iostream>
#include<queue>
using namespace std;

class Node{
    public : 
        int data;
        Node* left;
        Node* right;
        Node(int data){
            this->data = data;
            this->left = NULL;
            this->right = NULL;
        }
};
 Node* insertBinarySearchTree(Node* &root , int data ){
     if(root == NULL){
         Node* root = new Node(data);
         return root;
     }
     // left insertion 
     if(root->data > data){
        root->left =  insertBinarySearchTree(root->left , data);
         
     }
     else{
        root->right =  insertBinarySearchTree(root->right  , data);
     }
     
     return root;
 }  

void takeInput(Node* &root){
   vector<int> v = {10,20,5,11,0,2,4,5,6,25,15};
    
        for(int i = 0; i < v.size() ; i++ ){
          root =  insertBinarySearchTree(root , v[i]);
        }
    
       
    
}
void LevelOrderTraversal(Node* &root){
    if(root == NULL){
        return;
    }
    queue<Node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        Node* temp = q.front();
        q.pop();
        
        if(temp != NULL){
            cout << " " <<temp->data;
            if( temp->left ){
                q.push(temp -> left);
            }
            if(temp -> right){
                q.push(temp -> right);
            }
        }
        else{
            cout << endl;
            
            if(!q.empty()){
                q.push(NULL);
            }
        }
        
    }
}

bool SearchTarget(Node* root ,int target){
    if(root == NULL){
        return false;
    }
    if(root->data == target){
        return true;
    }
    if(root->data > target){
       return SearchTarget(root->left , target);
    }
    else{
       return SearchTarget(root->right , target);
    }
    

}
int findminElement(Node* root){
    if(root == NULL){
        return -1;
    }
    if(root->left == NULL){
        return root->data;
    }
   return findminElement(root->left);

    
}
int findMaxElement(Node* root){
    if(root == NULL){
        return -1;
    }
    if(root->right == NULL){
        return root->data;
    }
    return findMaxElement(root->right);
}

    
int main() {
   Node* root = NULL;
   takeInput(root);
   cout<<"Level order traversal : "<<endl;
   LevelOrderTraversal(root);
//   cout <<"Search output : "<<SearchTarget(root , 6);
   cout<<"min element : "<<findminElement(root); 
    return 0;
}
